"use strict";var app=angular.module("staffApp",["ngRoute","ui.bootstrap","templates"]);
app.controller("WorkerListCtrl",["$scope","$http","$uibModal",function(r,t,e){r.states={workers:{loading:!1}},r.workers=[],r.openAboutWindow=function(){e.open({animation:!0,templateUrl:"about.html",controller:"ModalAboutCtrl"})},r.removeWorker=function(t){var e=r.workers.indexOf(t);r.workers.splice(e,1)},r.editWorker=function(t){var o=!!t;e.open({animation:!0,templateUrl:"create-edit-worker.html",controller:"ModalCreateEditWorkerCtrl",controllerAs:"$ctrl",resolve:{worker:function(){return t||null}}}).result.then(function(e){o?angular.copy(e,t):r.workers.push(e)})},r.addWorker=function(){r.editWorker()},r.getRandomUsers=function(){r.states.workers.loading=!0,t.get("https://randomuser.me/api/?results=100").then(function(t){r.states.workers.loading=!1;for(var e=t.data.results,o=0;o<e.length;o++){var n=e[o],a={firstName:n.name.first,lastName:n.name.last,experience:Math.floor(20*Math.random())+1+" Ð³.",age:Math.floor(50*Math.random())+20,address:n.location.city+" "+n.location.street};r.workers.push(a)}},function(){alert("Error! Sorry!")})}}]);
app.controller("ModalAboutCtrl",["$scope","$uibModalInstance",function(o,n){o.close=function(){n.dismiss()}}]);
app.controller("ModalCreateEditWorkerCtrl",["$scope","$uibModalInstance","worker",function(e,r,t){e.states={isEdit:!!t,submitMode:!1},e.workerModel={firstName:null,lastName:null,experience:null,age:null,address:null},t&&angular.copy(t,e.workerModel);var o=["firstName","lastName"],l=function(){for(var r=0;r<o.length;r++)if(!e.workerModel[o[r]])return!1;return!0};e.checkValue=function(r){return!(!(e.states.submitMode&&o.indexOf(r)>-1)||e.workerModel[r])},e.saveWorker=function(t){if(e.states.submitMode=!0,!l())return!1;r.close(t)},e.close=function(){r.dismiss()}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
